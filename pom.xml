<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.11.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.mylicense</groupId>
	<artifactId>mylicense-spring-boot-starter</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<description>Demo project for Spring Boot</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<!-- 打包时忽略测试代码 -->
		<skipTests>true</skipTests>
		<!-- Apache Commons系列公共库 -->
		<commons-lang3>3.7</commons-lang3>
		<commons-io>2.7</commons-io>
		<commons-codec>1.11</commons-codec>
		<!-- Apache HttpClient -->
		<httpclient>4.5.5</httpclient>
		<!-- Fastjson -->
		<fastjson>1.2.47</fastjson>
		<!-- Java Servlet API -->
		<javax.servlet-api>4.0.1</javax.servlet-api>
		<!-- License -->
		<truelicense>1.33</truelicense>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-autoconfigure</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Commons -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons-lang3}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io}</version>
		</dependency>
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>${commons-codec}</version>
		</dependency>

		<!-- Apache HttpClient -->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>${httpclient}</version>
		</dependency>

		<!-- Fastjson -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson}</version>
		</dependency>

		<!-- Java Servlet API -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>${javax.servlet-api}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Jackson对自动解析JSON和XML格式的支持 -->
		<dependency>
			<groupId>com.fasterxml.jackson.jaxrs</groupId>
			<artifactId>jackson-jaxrs-json-provider</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>

		<!-- SLF4J和LogBack -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- License -->
		<dependency>
			<groupId>de.schlichtherle.truelicense</groupId>
			<artifactId>truelicense-core</artifactId>
			<version>${truelicense}</version>
		</dependency>

		<dependency>
			<groupId>net.sourceforge.nekohtml</groupId>
			<artifactId>nekohtml</artifactId>
			<version>1.9.22</version>
		</dependency>

	</dependencies>

	<build>
<!--		<finalName>mylicense-starter</finalName>-->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<nonFilteredFileExtensions>
						<nonFilteredFileExtension>keystore</nonFilteredFileExtension>
					</nonFilteredFileExtensions>
				</configuration>
			</plugin>

			<!-- 代码混淆插件 -->
			<plugin>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.0.2</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.0.14</version>
				<executions>
					<execution>
						<!-- 打包的时候混淆 -->
						<phase>package</phase>
						<goals>
							<!-- 使用插件的混淆功能 -->
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 是否将生成的PG文件安装部署 -->
					<attach>true</attach>
					<!-- 是否混淆 -->
					<obfuscate>true</obfuscate>
					<!-- 指定生成文件分类 -->
					<attachArtifactClassifier>pg</attachArtifactClassifier>
					<!-- ProGuard配置参数(可引用cfg配置文件) -->
					<options>
						<!-- JDK目标版本1.8-->
						<option>-target 1.8</option>
						<!-- 不做收缩（删除注释、未被引用代码） -->
						<option>-dontshrink</option>
						<!-- 不做优化（变更代码实现逻辑） -->
						<option>-dontoptimize</option>
						<!-- 不路过非公用类文件及成员 -->
						<option>-dontskipnonpubliclibraryclasses</option>
						<option>-dontskipnonpubliclibraryclassmembers</option>
						<!--不用大小写混合类名机制-->
						<option>-dontusemixedcaseclassnames</option>
						<!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
						<option>-allowaccessmodification</option>
						<!-- 确定统一的混淆类的成员名称来增加混淆 -->
						<option>-useuniqueclassmembernames</option>
						<!-- 不混淆包名 -->
<!--						<option>-keeppackagenames</option>-->
						<option>-keeppackagenames com.mylicense.api</option>
						<option>-adaptclassstrings</option>
						<!-- <option>-keepdirectories</option> -->
						<!-- 不混淆所有特殊的类 -->
						<option>-keepattributes
							Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
						<!-- This option will save all original methods parameters in files defined
                            in -keep sections, otherwise all parameter names will be obfuscate. -->
						<option>-keepparameternames</option>
						<option>-keepclassmembers class * {
							@org.springframework.beans.factory.annotation.Autowired *;
							@org.springframework.beans.factory.annotation.Value *;
							}
						</option>
						<!-- 混淆这个包下的类  此处需要更改为自己需要混淆的包名-->
						<option>-keep class !com.mylicense.** { *; }</option>
<!--						<option>-keep class !com.mylicense.license.* { *; }</option>-->
<!--						<option>-keep class !com.mylicense.service.* { *; }</option>-->

						<!-- 不混淆main方法   此处需要更改为自己的启动类路径 -->
<!--						<option>-keep class com.mylicense.MyLicenseStarterApplication { *; }</option>-->
						<option>-keep class com.mylicense.config.LicenseAutoConfigure { *; }</option>
						<option>-keep class com.mylicense.api.LicenseInit { *; }</option>

						<!-- 不混淆所有的set/get方法-->
						<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
						<!-- 不混淆包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别 -->

						<!-- 不对包类的类名进行混淆，但对类中的属性和方法混淆   -->
						<!--<option>-keep class com.package.util.** </option>-->
						<!-- <option>-keep class com.example.service.** </option>-->

						<!-- 不混淆包下的所有类名，且类中的方法和属性也不混淆 -->
						<!--<option>-keep class com.example.redis.** { *; }</option>
                        <option>-keep class com.example.dao.** { *; }</option>-->
						<!-- 无视跳过警告  因为修改代码的过程程序检测到有些文件不能更改就会报警告导致失败   如果对自己写的代码比较有信心的话可以直接无视 -->
						<option>-dontwarn **</option>
					</options>
					<!--class 混淆后输出的jar包 -->
					<outjar>${project.build.finalName}-pg.jar</outjar>
					<!-- 混淆时需要引用的java库，这些库的类不会做混淆 -->
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jce.jar</lib>
					</libs>
					<!-- 需要做混淆的jar或目录 -->
					<injar>classes</injar>
					<!-- 输出目录 -->
					<outputDirectory>${project.build.directory}</outputDirectory>
				</configuration>
			</plugin>

		</plugins>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
					<include>**/*.tld</include>
				</includes>
				<filtering>false</filtering>
			</resource>
		</resources>
	</build>

</project>
